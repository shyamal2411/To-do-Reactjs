{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleSubmit","preventDefault","onSubmit","id","Math","floor","random","text","className","placeholder","onChange","name","ref","onClick","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","TodoList","setTodos","test","newTodos","console","log","complete","updatedTodos","removedArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f35677d.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\r\n\r\nfunction TodoForm(props) {\r\n    const [input,setInput] =useState(props.edit ? props.edit.value : '');\r\n    const inputRef = useRef(null);\r\n\r\n    useEffect(() =>{\r\n        inputRef.current.focus()\r\n    });\r\n\r\n\r\n    const handleChange = e=>{\r\n        setInput(e.target.value);\r\n    };\r\n\r\n    const handleSubmit =e =>{\r\n        e.preventDefault();\r\n\r\n        props.onSubmit({\r\n            id:Math.floor(Math.random()*10000),\r\n            text:input\r\n        });\r\n       setInput('');\r\n    };\r\n    \r\n  return (\r\n    <form onSubmit={handleSubmit} className='todo-form'>\r\n      {props.edit ? (\r\n        <>\r\n          <input\r\n            placeholder='Update your item'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            ref={inputRef}\r\n            className='todo-input edit'\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button edit'>\r\n            Update\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <input\r\n            placeholder='Add a todo'\r\n            value={input}\r\n            onChange={handleChange}\r\n            name='text'\r\n            className='todo-input'\r\n            ref={inputRef}\r\n          />\r\n          <button onClick={handleSubmit} className='todo-button'>\r\n            Add todo\r\n          </button>\r\n        </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { RiCloseCircleLine } from 'react-icons/ri';\r\nimport { TiEdit } from 'react-icons/ti';\r\n\r\nconst Todo = ({ todos, completeTodo, removeTodo, updateTodo }) => {\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n  if (edit.id) {\r\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\r\n  }\r\n\r\n  return todos.map((todo, index) => (\r\n    <div\r\n      className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\r\n      key={index}\r\n    >\r\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n        {todo.text}\r\n      </div>\r\n      <div className='icons'>\r\n        <RiCloseCircleLine\r\n          onClick={() => removeTodo(todo.id)}\r\n          className='delete-icon'\r\n        />\r\n        <TiEdit\r\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\r\n          className='edit-icon'\r\n        />\r\n      </div>\r\n    </div>\r\n  ));\r\n};\r\n\r\nexport default Todo;","import React,{useState} from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\nfunction TodoList() {\r\n    const [todos,setTodos]=useState([]);\r\n    \r\n    const addTodo = todo=>{\r\n    //   the purpose of this function is If user types nothing but the space then it enters nothing in the list\r\n        if(!todo.text || /^\\s*$/.test(todo.text)) {\r\n            return ;\r\n        }\r\n\r\n        const newTodos =[todo, ...todos]\r\n        setTodos(newTodos);\r\n        console.log(...todos);\r\n    };\r\n\r\n    //!Updating list Function.\r\n    const updateTodo =(todoId,newValue) =>{\r\n          if(!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n            return ;\r\n        };\r\n        setTodos(prev => prev.map(item=>(item.id===todoId ? newValue : item)));\r\n    \r\n};\r\n\r\n    const removeTodo =id=>{\r\n        const removedArr =[...todos].filter(todo=>todo.id !==id);\r\n\r\n        setTodos(removedArr);\r\n    };\r\n\r\n\r\n    const completeTodo = id=>{\r\n        let updatedTodos = todos.map(todo => {\r\n            if(todo.id === id){\r\n                todo.isComplete=!todo.isComplete;\r\n            }\r\n            return todo;\r\n            });\r\n            setTodos(updatedTodos); \r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>What are we doing today?</h1>\r\n            <TodoForm onSubmit={addTodo}/>\r\n            <Todo\r\n            todos={todos} \r\n            complete={completeTodo}\r\n            removeTodo={removeTodo}\r\n            updateTodo={updateTodo}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import './App.css';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n     <TodoList/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}